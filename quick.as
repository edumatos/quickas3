package {	import flash.display.MovieClip	import flash.display.DisplayObject	import flash.events.MouseEvent	import flash.events.Event	public class quick extends MovieClip{		/*public function load(url:String):quickLoader{			return new quickLoader(url);		}*/				public static function wrap(d:DisplayObject):quickSelection{			return new quickSelection(d)		}																/*public function select(cl:Class):Array{			var ret:quickSelection = new quickSelection();			for( var a:int=0;a<this.numChildren;a++){				if( this.getChildAt(a) is cl ) ret.push( this.getChildAt(a) );			}			return ret;		}*/						//include "quick.inc"		}}import flash.display.DisplayObjectimport flash.events.MouseEventimport flash.events.Eventimport flash.display.Loaderimport flash.net.URLRequestimport flash.utils.setIntervalimport flash.events.EventDispatcherimport flash.events.FocusEventimport flash.display.DisplayObjectContainerimport flash.events.KeyboardEventimport flash.utils.getQualifiedClassName;import flash.utils.getDefinitionByName/*class quickLoader extends Loader implements quicker{	function quickLoader(path:String){		this.load(new URLRequest(path));	}	public function complete(fn:Function):quickLoader{		var self:quickLoader = this;		this.contentLoaderInfo.addEventListener(Event.COMPLETE, function(){			fn.apply(self,null)		})		return this;	}//	include "quick.inc"	}*/dynamic class quickSelection extends Array{	function quickSelection(...args:Array){		super.push.apply(null, args)	}			public function find(cl:Class):quickSelection{		var ret:quickSelection = new quickSelection();		return ret	}		public function all():quickSelection{		var ret:quickSelection = new quickSelection();		for each( var c:DisplayObject in this){			if(c is DisplayObjectContainer){				var doc:DisplayObjectContainer = c as DisplayObjectContainer				for( var a:int=0;a<doc.numChildren;a++){					var elm:DisplayObject = doc.getChildAt(a)					ret.push(elm);					ret.push.apply(null, new quickSelection(elm).all() ) 				}			}		}		return ret	}		public function children():quickSelection{		var ret:quickSelection = new quickSelection();		for each( var c:DisplayObject in this){			if(c is DisplayObjectContainer){				var doc:DisplayObjectContainer = c as DisplayObjectContainer				for( var a:int=0;a<doc.numChildren;a++){					ret.push(doc.getChildAt(a));				}			}		}		return ret	}			public function bind(to:String, fn:Function):quickSelection{		for each( var c:DisplayObject in this)			c.addEventListener(to, function(e:Event){ fn.apply(c, fn.length ? [e] : null) }, false, 1, true)		return this	}		public function exec(fn:Function):quickSelection{		for each( var c:DisplayObject in this)			fn.apply( c, null);		return this	}	public function select(cl:Class):quickSelection{		var ret:quickSelection = new quickSelection();		for each( var c:DisplayObject in this){			if( Object(c).constructor === cl ) ret.push(c)		}		return ret	}	/*	public function children():quickSelection{		var ret:quickSelection = new quickSelection();		for each( var elm:DisplayObject in this)			for each( var c:DisplayObject in elm){				ret.push(c)			}		return ret;	}*/			public function add(ref:*):quickSelection{		for each(var c:DisplayObjectContainer in this)			if(ref is DisplayObject){				c.addChild(ref);			}else if(ref is Array){				for each( var cc:DisplayObject in ref as Array){					c.addChild(cc)				}			}		return this;	}				public function remove(ref:*):quickSelection{				for each(var c:DisplayObjectContainer in this)			if(ref is DisplayObject){				 if(ref.parent == c ) c.removeChild(ref);			}else if(ref is Array){				for each( var cc:DisplayObject in ref as Array){					if(ref.parent == c ) c.removeChild(cc)				}			}		return this;	}				public function not(ref:*):quickSelection{		var a:int = 0;		if(ref is DisplayObject){			for(;a<this.length;a++){				if( this[a] === ref){					this.splice(a,1);					break;				}			}					}else if(ref is Class){			for(;a<this.length;a++){				if( this[a] is ref){					this.splice(a,1);					a--				}			}					}		return this;	}		public function toString(){		var ret:String = "[quickSelection]\n";		for each(var c:DisplayObject in this){			ret += "\t" + c + "\n"		}		return ret;	}		public function hide():quickSelection{		return exec(function(){this.visible = false})	}	public function show():quickSelection{		return exec(function(){this.visible = true})	}	public function toggle():quickSelection{		return exec(function(){this.visible =! this.visible})	}	public function alpha(a:Number):quickSelection{		return exec(function(){this.alpha = a })	}	public function rotation(r:Number):quickSelection{		return exec(function(){this.rotation = r })	}				/** Events **/			public function activate(fn:Function):quickSelection{		return bind(Event.ACTIVATE,fn)	}	public function added(fn:Function):quickSelection{		return bind(Event.ADDED,fn)	}	public function addedToStage(fn:Function):quickSelection{		return bind(Event.ADDED_TO_STAGE,fn)	}	public function click(fn:Function):quickSelection{		return bind(MouseEvent.CLICK,fn)	}	public function deactivate(fn:Function):quickSelection{		return bind(Event.DEACTIVATE,fn)	}	public function doubleClick(fn:Function):quickSelection{		return bind(MouseEvent.DOUBLE_CLICK,fn)	}	public function enterFrame(fn:Function):quickSelection{		return bind(Event.ENTER_FRAME,fn)	}	public function focusIn(fn:Function):quickSelection{		return bind(FocusEvent.FOCUS_IN,fn)	}	public function focusOut(fn:Function):quickSelection{		return bind(FocusEvent.FOCUS_OUT,fn)	}	public function keyDown(fn:Function):quickSelection{		return bind(KeyboardEvent.KEY_DOWN,fn)	}	public function keyFocusChange(fn:Function):quickSelection{		return bind(FocusEvent.KEY_FOCUS_CHANGE,fn)	}	public function keyUp(fn:Function):quickSelection{		return bind(KeyboardEvent.KEY_UP,fn)	}	public function mouseDown(fn:Function):quickSelection{		return bind(MouseEvent.MOUSE_DOWN,fn)	}	public function mouseFocusChange(fn:Function):quickSelection{		return bind(FocusEvent.MOUSE_FOCUS_CHANGE,fn)	}	public function mouseMove(fn:Function):quickSelection{		return bind(MouseEvent.MOUSE_MOVE,fn)	}	public function mouseOut(fn:Function):quickSelection{		return bind(MouseEvent.MOUSE_OUT,fn)	}	public function mouseOver(fn:Function):quickSelection{		return bind(MouseEvent.MOUSE_OVER,fn)	}	public function mouseUp(fn:Function):quickSelection{		return bind(MouseEvent.MOUSE_UP,fn)	}	public function mouseWheel(fn:Function):quickSelection{		return bind(MouseEvent.MOUSE_WHEEL,fn)	}	public function removed(fn:Function):quickSelection{		return bind(Event.REMOVED,fn)	}	public function removedFromStage(fn:Function):quickSelection{		return bind(Event.REMOVED_FROM_STAGE,fn)	}	public function render(fn:Function):quickSelection{		return bind(Event.RENDER,fn)	}	public function rollOut(fn:Function):quickSelection{		return bind(MouseEvent.ROLL_OUT,fn)	}	public function rollOver(fn:Function):quickSelection{		return bind(MouseEvent.ROLL_OVER,fn)	}	public function tabChildrenChange(fn:Function):quickSelection{		return bind(Event.TAB_CHILDREN_CHANGE,fn)	}	public function tabEnabledChange(fn:Function):quickSelection{		return bind(Event.TAB_ENABLED_CHANGE,fn)	}	public function tabIndexChange(fn:Function):quickSelection{		return bind(Event.TAB_INDEX_CHANGE,fn)	}}