package quick{	import flash.utils.Proxy;	import flash.utils.flash_proxy;	import flash.events.Event	import flash.events.EventDispatcher		public dynamic class Quicker extends Proxy {		protected var item:*		public function Quicker(item:*) {			this.item = item;		}			override flash_proxy function callProperty(name:*, ... args):* {			handleInsert(name, args)			return this;					}				override flash_proxy function deleteProperty(name:*):Boolean{			if(item.hasOwnProperty(name)){				delete item[name]			}else if(item is EventDispatcher){				QuickEvent.release(item, name);			}						return true;		}				public function bind(event:String, fn:Function):Quicker{			QuickEvent.bind(this, item, event, fn )			return this		}				public function unbind(event:String, fn:Function):Quicker{			QuickEvent.unbind(item, event, fn )			return this		}								override flash_proxy function getProperty(name:*):* {			return item[name];		}					override flash_proxy function setProperty(name:*, value:*):void {			handleInsert(name, [value])		}						private function handleInsert(name:*, args:Array){			if(item.hasOwnProperty(name)){				if(item[name] is Function){										for( var a:int=0;a<args.length;a++){						if(args[a] is Quicker)							args[a] = args[a].item					}										item[name].apply(this, args)				}else					item[name] = args[0]			}else if(args[0] is Function && item is EventDispatcher){				bind(name, args[0])			}		}	}	}