package quick{	import flash.display.DisplayObject	import flash.events.MouseEvent	import flash.events.Event	import flash.display.Loader	import flash.net.URLRequest	import flash.utils.setInterval	import flash.events.EventDispatcher	import flash.events.FocusEvent	import flash.display.DisplayObjectContainer	import flash.events.KeyboardEvent	import flash.utils.getQualifiedClassName;	import flash.utils.getDefinitionByName	import flash.accessibility.AccessibilityProperties	import flash.geom.Rectangle	import flash.geom.Transform		public dynamic class QuickSelection extends Array{		function QuickSelection(...args:Array){			insert(args)		}				public function insert(...args:Array){			for each( var c:* in args){				if(c is Class){					super.push(new c);				}else if(c is Array){					insert.apply(null,c);				}else{					super.push(c);				}			}		}				public function all():QuickSelection{			var ret:QuickSelection = new QuickSelection();			for each( var c:DisplayObject in this){				if(c is DisplayObjectContainer){					var doc:DisplayObjectContainer = c as DisplayObjectContainer					for( var a:int=0;a<doc.numChildren;a++){						var elm:DisplayObject = doc.getChildAt(a)						ret.push(elm);						ret.push.apply(null, new QuickSelection(elm).all() ) 					}				}			}			return ret		}				public function children():QuickSelection{			var ret:QuickSelection = new QuickSelection();			for each( var c:DisplayObject in this){				if(c is DisplayObjectContainer){					var doc:DisplayObjectContainer = c as DisplayObjectContainer					for( var a:int=0;a<doc.numChildren;a++){						ret.push(doc.getChildAt(a));					}				}			}			return ret		}						public function bind(to:String, fn:Function):QuickSelection{			for each( var c:DisplayObject in this)				c.addEventListener(to, function(event:Event){ fn.apply(c, fn.length ? [event] : null) }, false, 1, true)			return this		}				public function each(fn:Function):QuickSelection{			for each( var c:DisplayObject in this)				fn.apply( c, null);			return this		}			public function select(cl:Class):QuickSelection{			var ret:QuickSelection = new QuickSelection();			for each( var c:DisplayObject in this){				if( Object(c).constructor === cl ) ret.push(c)			}			return ret		}				public function find(cl:Class):QuickSelection{			var ret:QuickSelection = new QuickSelection();			var a:QuickSelection = all()			for each( var c:DisplayObject in a){				if( Object(c).constructor === cl ) ret.push(c)			}			return ret		}						public function add(...ref:Array):QuickSelection{			for each(var c:DisplayObjectContainer in this){				for each( var cc:* in ref){					if(cc is DisplayObject){						c.addChild(cc)					}else if(cc is Class){						c.addChild(new cc)					}else if(cc is Array){						add.apply(this, cc);					}				}			}			return this;		}							public function remove(...ref:Array):QuickSelection{			for each(var c:DisplayObjectContainer in this){				for each( var cc:DisplayObject in ref){					if(ref.parent == c ) c.removeChild(cc)				}			}			return this;		}								public function not(ref:*):QuickSelection{			var a:int = 0;			if(ref is DisplayObject){				for(;a<this.length;a++){					if( this[a] === ref){						this.splice(a,1);						break;					}				}						}else if(ref is Class){				for(;a<this.length;a++){					if( this[a] is ref){						this.splice(a,1);						a--					}				}						}			return this;		}				public function toString(){			var ret:String = "[QuickSelection]\n";			for each(var c:DisplayObject in this){				ret += "\t" + c + "\n"			}			return ret;		}		/** Helpers **/		public function move(x:Number, y:Number):QuickSelection{			return each(function(){				this.x = x;				this.y = y;			})		}		public function hide():QuickSelection{			return visible(false)		}		public function show():QuickSelection{			return visible(true)		}		public function toggle():QuickSelection{			return each(function(){this.visible =! this.visible})		}				/** Property Overrides **/		public function accessibilityProperties(a:AccessibilityProperties):QuickSelection{			return each(function(){this.accessibilityProperties = a })		}		public function alpha(a:Number):QuickSelection{			return each(function(){this.alpha = a })		}		public function blendMode(a:String):QuickSelection{			return each(function(){this.blendMode = a })		}		public function cacheAsBitmap(a:Boolean):QuickSelection{			return each(function(){this.cacheAsBitmap = a })		}		public function filters(a:Array):QuickSelection{			return each(function(){this.filters = a })		}		public function height(a:Number):QuickSelection{			return each(function(){this.height = a })		}		public function mask(a:DisplayObject):QuickSelection{			return each(function(){this.mask = a })		}		public function name(a:String):QuickSelection{			return each(function(){this.name = a })		}		public function opaqueBackground(a:Object):QuickSelection{			return each(function(){this.opaqueBackground = Object })		}		public function rotation(a:Number):QuickSelection{			return each(function(){this.rotation = a })		}		public function scale9Grid(a:Rectangle):QuickSelection{			return each(function(){this.scale9Grid = a })		}		public function scaleX(a:Number):QuickSelection{			return each(function(){this.scaleX = a })		}		public function scaleY(a:Number):QuickSelection{			return each(function(){this.scaleY = a })		}		public function scrollRect(a:Rectangle):QuickSelection{			return each(function(){this.scrollRect = a })		}		public function transform(a:Transform):QuickSelection{			return each(function(){this.transform = a })		}		public function visible(a:Boolean):QuickSelection{			return each(function(){this.visible = a })		}		public function width(a:Number):QuickSelection{			return each(function(){this.width = a })		}		public function x(a:Number):QuickSelection{			return each(function(){this.x = a })		}		public function y(a:Number):QuickSelection{			return each(function(){this.y = a })		}		/** Events **/						public function activate(fn:Function):QuickSelection{			return bind(Event.ACTIVATE,fn)		}		public function added(fn:Function):QuickSelection{			return bind(Event.ADDED,fn)		}		public function addedToStage(fn:Function):QuickSelection{			return bind(Event.ADDED_TO_STAGE,fn)		}		public function click(fn:Function):QuickSelection{			return bind(MouseEvent.CLICK,fn)		}		public function deactivate(fn:Function):QuickSelection{			return bind(Event.DEACTIVATE,fn)		}		public function doubleClick(fn:Function):QuickSelection{			return bind(MouseEvent.DOUBLE_CLICK,fn)		}		public function enterFrame(fn:Function):QuickSelection{			return bind(Event.ENTER_FRAME,fn)		}		public function focusIn(fn:Function):QuickSelection{			return bind(FocusEvent.FOCUS_IN,fn)		}		public function focusOut(fn:Function):QuickSelection{			return bind(FocusEvent.FOCUS_OUT,fn)		}		public function keyDown(fn:Function):QuickSelection{			return bind(KeyboardEvent.KEY_DOWN,fn)		}		public function keyFocusChange(fn:Function):QuickSelection{			return bind(FocusEvent.KEY_FOCUS_CHANGE,fn)		}		public function keyUp(fn:Function):QuickSelection{			return bind(KeyboardEvent.KEY_UP,fn)		}		public function mouseDown(fn:Function):QuickSelection{			return bind(MouseEvent.MOUSE_DOWN,fn)		}		public function mouseFocusChange(fn:Function):QuickSelection{			return bind(FocusEvent.MOUSE_FOCUS_CHANGE,fn)		}		public function mouseMove(fn:Function):QuickSelection{			return bind(MouseEvent.MOUSE_MOVE,fn)		}		public function mouseOut(fn:Function):QuickSelection{			return bind(MouseEvent.MOUSE_OUT,fn)		}		public function mouseOver(fn:Function):QuickSelection{			return bind(MouseEvent.MOUSE_OVER,fn)		}		public function mouseUp(fn:Function):QuickSelection{			return bind(MouseEvent.MOUSE_UP,fn)		}		public function mouseWheel(fn:Function):QuickSelection{			return bind(MouseEvent.MOUSE_WHEEL,fn)		}		public function removed(fn:Function):QuickSelection{			return bind(Event.REMOVED,fn)		}		public function removedFromStage(fn:Function):QuickSelection{			return bind(Event.REMOVED_FROM_STAGE,fn)		}		public function render(fn:Function):QuickSelection{			return bind(Event.RENDER,fn)		}		public function rollOut(fn:Function):QuickSelection{			return bind(MouseEvent.ROLL_OUT,fn)		}		public function rollOver(fn:Function):QuickSelection{			return bind(MouseEvent.ROLL_OVER,fn)		}		public function tabChildrenChange(fn:Function):QuickSelection{			return bind(Event.TAB_CHILDREN_CHANGE,fn)		}		public function tabEnabledChange(fn:Function):QuickSelection{			return bind(Event.TAB_ENABLED_CHANGE,fn)		}		public function tabIndexChange(fn:Function):QuickSelection{			return bind(Event.TAB_INDEX_CHANGE,fn)		}	}}